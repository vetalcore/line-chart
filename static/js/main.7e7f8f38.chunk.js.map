{"version":3,"sources":["Chart/Chart.js","Chart/Legend.js","helpers/index.js","Chart/index.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","data","keys","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","map","key","Line","type","stroke","Legend","charts","onToggleChart","chartName","htmlFor","onChange","e","target","checked","name","id","fetchData","points","a","fetch","response","json","console","log","getActiveCharts","legendObj","Object","filter","getTimeStamp","Date","toISOString","substr","ChartWhitDataAndlegend","numOfLines","useState","Array","from","length","reduce","acc","val","index","generateLegendObject","setLegendObj","setData","useCallback","updates","timeStamp","prevData","item","prevVal","updateChart","activeCharts","diff","slice","useEffect","intervalId","setInterval","clearInterval","chartNames","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e7f8f38.chunk.js","sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nconst Chart = ({ data, keys = [] }) => (\n  <ResponsiveContainer width=\"100%\" height=\"100%\">\n    <LineChart\n      width={500}\n      height={300}\n      data={data}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      {\n        keys.map(key => (\n          <Line key={key} type=\"monotone\" dataKey={key} stroke=\"#8884d8\" />\n        ))\n      }\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default Chart;\n","const Legend = ({ charts = [], onToggleChart }) => {\n  return (<div>\n    {\n      charts.map(chartName => (\n        <div key={chartName}>\n          <label htmlFor={chartName}>{chartName}</label>\n          <input onChange={e => onToggleChart(chartName, e.target.checked)} type=\"checkbox\" name={chartName} id={chartName} />\n        </div>\n      ))\n    }\n  </div>);\n};\n\nexport default Legend;\n","export const fetchData = async (points) => {\n  try {\n    const response = await fetch(`https://qrng.anu.edu.au/API/jsonI.php?length=${points}&type=uint8&size=1`)\n    const json = await response.json();\n    return json.data;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Chart from \"./Chart\";\nimport Legend from \"./Legend\";\nimport { fetchData } from '../helpers';\n\nconst generateLegendObject = numOfLines => (\n  Array.from({ length: numOfLines }).reduce((acc, val, index) => ({ ...acc, [`Chart ${index}`]: false }), {})\n);\nconst getActiveCharts = (legendObj) => Object.keys(legendObj).filter(key => legendObj[key]);\nconst getTimeStamp = () => new Date().toISOString().substr(11, 8);\n\nconst ChartWhitDataAndlegend = ({ numOfLines = 1 }) => {\n  const [legendObj, setLegendObj] = useState(generateLegendObject(numOfLines));\n  const [data, setData] = useState([]);\n\n  const onToggleChart = useCallback(async (name, checked) => {\n    const updates = await fetchData(10);\n    const timeStamp = getTimeStamp();\n\n    if (checked && (name in legendObj)) {\n      setData(prevData => Array.from({ length: 10 }).map((item, index) => ({\n        ...prevData[index] && prevData[index],\n        [name]: updates[index],\n        name: timeStamp,\n      })));\n    }\n\n    setLegendObj(prevVal => ({\n      ...prevVal,\n      [name]: checked,\n    }));\n\n  }, [setLegendObj, legendObj]);\n\n  const updateChart = useCallback(async () => {\n    const activeCharts = getActiveCharts(legendObj)\n    if (!activeCharts.length) return;\n\n    const updates = await fetchData(activeCharts.length);\n    const timeStamp = getTimeStamp();;\n\n    const diff = activeCharts.reduce((acc, chartName, index) => (\n      {\n        ...acc,\n        [chartName]: updates[index]\n      }\n    ), { name: timeStamp });\n\n    setData(prevData => [...prevData.slice(prevData.length < 10 ? 0 : 1, 10), diff]);\n  }, [legendObj]);\n\n  useEffect(() => {\n    const activeCharts = getActiveCharts(legendObj)\n\n    let intervalId;\n    if (activeCharts.length) {\n      intervalId = setInterval(updateChart, 1000);\n    }\n\n    return () => {\n      clearInterval(intervalId);\n    }\n  }, [updateChart, legendObj]);\n\n  const chartNames = Object.keys(legendObj);\n\n  return (\n    <>\n      <Chart data={data} keys={chartNames} />\n      <Legend charts={chartNames} onToggleChart={onToggleChart} />\n    </>\n  );\n}\n\nexport default ChartWhitDataAndlegend;\n","import Chart from './Chart'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart numOfLines={4} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}